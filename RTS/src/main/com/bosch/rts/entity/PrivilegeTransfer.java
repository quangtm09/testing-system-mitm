package com.bosch.rts.entity;

// Generated Nov 14, 2011 9:29:48 AM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * PrivilegeTransfer generated by hbm2java.
 */
@Entity
@Table(name = "trts_privilege_transfer", catalog = "rts")
public class PrivilegeTransfer implements java.io.Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = -1305248965395645619L;
	
	/** The rot privilege transfer id. */
	private Integer rotPrivilegeTransferId;
	
	/** The user by rot usr to user id. */
	private User userByRotUsrToUserId;
	
	/** The privilege. */
	private Privilege privilege;
	
	/** The user by rot usr from user id. */
	private User userByRotUsrFromUserId;
	
	/** The rot description. */
	private String rotDescription;
	
	/** The rot from date. */
	private Date rotFromDate;
	
	/** The rot to date. */
	private Date rotToDate;
	
	/** The org unit. */
	private OrgUnit orgUnit;

	/**
	 * Instantiates a new privilege transfer.
	 */
	public PrivilegeTransfer() {
	}

	/**
	 * Instantiates a new privilege transfer.
	 *
	 * @param userByRotUsrToUserId the user by rot usr to user id
	 * @param privilege the privilege
	 * @param userByRotUsrFromUserId the user by rot usr from user id
	 * @param rotDescription the rot description
	 * @param rotFromDate the rot from date
	 * @param rotToDate the rot to date
	 */
	public PrivilegeTransfer(User userByRotUsrToUserId, Privilege privilege,
			User userByRotUsrFromUserId, String rotDescription,
			Date rotFromDate, Date rotToDate) {
		this.userByRotUsrToUserId = userByRotUsrToUserId;
		this.privilege = privilege;
		this.userByRotUsrFromUserId = userByRotUsrFromUserId;
		this.rotDescription = rotDescription;
		this.rotFromDate = rotFromDate;
		this.rotToDate = rotToDate;
	}

	/**
	 * Gets the rot privilege transfer id.
	 *
	 * @return the rot privilege transfer id
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "rot_privilege_transfer_id", unique = true, nullable = false)
	public Integer getRotPrivilegeTransferId() {
		return this.rotPrivilegeTransferId;
	}

	/**
	 * Sets the rot privilege transfer id.
	 *
	 * @param rotPrivilegeTransferId the new rot privilege transfer id
	 */
	public void setRotPrivilegeTransferId(Integer rotPrivilegeTransferId) {
		this.rotPrivilegeTransferId = rotPrivilegeTransferId;
	}

	/**
	 * Gets the user by rot usr to user id.
	 *
	 * @return the user by rot usr to user id
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "rot_usr_to_user_id")
	public User getUserByRotUsrToUserId() {
		return this.userByRotUsrToUserId;
	}

	/**
	 * Sets the user by rot usr to user id.
	 *
	 * @param userByRotUsrToUserId the new user by rot usr to user id
	 */
	public void setUserByRotUsrToUserId(User userByRotUsrToUserId) {
		this.userByRotUsrToUserId = userByRotUsrToUserId;
	}

	/**
	 * Gets the privilege.
	 *
	 * @return the privilege
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "rot_prv_privilege_id")
	public Privilege getPrivilege() {
		return this.privilege;
	}

	/**
	 * Sets the privilege.
	 *
	 * @param privilege the new privilege
	 */
	public void setPrivilege(Privilege privilege) {
		this.privilege = privilege;
	}

	/**
	 * Gets the user by rot usr from user id.
	 *
	 * @return the user by rot usr from user id
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "rot_usr_from_user_id")
	public User getUserByRotUsrFromUserId() {
		return this.userByRotUsrFromUserId;
	}

	/**
	 * Sets the user by rot usr from user id.
	 *
	 * @param userByRotUsrFromUserId the new user by rot usr from user id
	 */
	public void setUserByRotUsrFromUserId(User userByRotUsrFromUserId) {
		this.userByRotUsrFromUserId = userByRotUsrFromUserId;
	}

	/**
	 * Gets the rot description.
	 *
	 * @return the rot description
	 */
	@Column(name = "rot_description", length = 100)
	public String getRotDescription() {
		return this.rotDescription;
	}

	/**
	 * Sets the rot description.
	 *
	 * @param rotDescription the new rot description
	 */
	public void setRotDescription(String rotDescription) {
		this.rotDescription = rotDescription;
	}

	/**
	 * Gets the rot from date.
	 *
	 * @return the rot from date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "rot_from_date", length = 19)
	public Date getRotFromDate() {
		return this.rotFromDate;
	}

	/**
	 * Sets the rot from date.
	 *
	 * @param rotFromDate the new rot from date
	 */
	public void setRotFromDate(Date rotFromDate) {
		this.rotFromDate = rotFromDate;
	}

	/**
	 * Gets the rot to date.
	 *
	 * @return the rot to date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "rot_to_date", length = 19)
	public Date getRotToDate() {
		return this.rotToDate;
	}

	/**
	 * Sets the rot to date.
	 *
	 * @param rotToDate the new rot to date
	 */
	public void setRotToDate(Date rotToDate) {
		this.rotToDate = rotToDate;
	}
	
	/**
	 * Gets the org unit.
	 *
	 * @return the org unit
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "rot_org_unit_id")
	public OrgUnit getOrgUnit() {
		return orgUnit;
	}

	/**
	 * Sets the org unit.
	 *
	 * @param orgUnit the new org unit
	 */
	public void setOrgUnit(OrgUnit orgUnit) {
		this.orgUnit = orgUnit;
	}
}
